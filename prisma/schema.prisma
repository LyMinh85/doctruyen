// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  NORMAL
  VIP
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  SECRECY
}

model User {
  id               Int      @id @default(autoincrement())
  username         String   @db.VarChar(50)
  email            String   @unique @db.VarChar(255)
  password         String   @db.VarChar(128)
  role             UserRole @default(NORMAL)
  gender           Gender
  bio              String?  @db.VarChar(500)
  avatar_url       String   @db.VarChar(255)
  reading_hours    Int      @default(0)
  level            Level    @relation(fields: [level_id], references: [id])
  level_id         Int      @default(1)
  exp              Int      @default(0)
  last_login       DateTime @default(now())
  auth_provider_id String   @unique @db.VarChar(255)
  auth_provider    String   @db.VarChar(50)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  points           Int      @default(0)
  vip_status       Boolean  @default(false)
  Book             Book[]

  @@index([username, email, auth_provider_id])
}

model Level {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(50)
  level        Int           @unique
  required_exp Int
  created_at   DateTime      @default(now())
  LevelReward  LevelReward[]
  User         User[]
}

enum RewardType {
  ITEM
  BADGE
  CURRENCY
}

model Reward {
  id          Int           @id @default(autoincrement())
  description String        @db.VarChar(255)
  type        RewardType
  created_at  DateTime      @default(now())
  LevelReward LevelReward[]
}

model LevelReward {
  id         Int      @id @default(autoincrement())
  Level      Level    @relation(fields: [level_id], references: [id])
  level_id   Int
  Reward     Reward   @relation(fields: [reward_id], references: [id])
  reward_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum BookStatus {
  ON_GOING
  FINISHED
}

enum BookVisibility {
  PUBLIC
  PRIVATE
}

enum BookType {
  TRANSLATED
  ORIGINAL
  MACHINE_TRANSLATED
}

model Book {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(150)
  author        String         @db.VarChar(100)
  description   String?        @db.VarChar(1000)
  user          User           @relation(fields: [user_id], references: [id])
  user_id       Int
  cover_url     String         @db.VarChar(255)
  status        BookStatus     @default(ON_GOING)
  visibility    BookVisibility @default(PRIVATE)
  is_vip        Boolean        @default(false)
  views_count   Int            @default(0)
  likes_count   Int            @default(0)
  words_count   Int            @default(0)
  rating        Float          @default(0)
  reviews_count Int            @default(0)
  cost          Int            @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  type          BookType       @default(ORIGINAL)
  BookCategory  BookCategory[]
  BookTag       BookTag[]
  Chapter       Chapter[]

  

  @@index([title, author])
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(50)
  description  String?        @db.VarChar(255)
  created_at   DateTime       @default(now())
  BookCategory BookCategory[]
}

model BookCategory {
  id          Int      @id @default(autoincrement())
  book        Book     @relation(fields: [book_id], references: [id])
  book_id     Int
  category    Category @relation(fields: [category_id], references: [id])
  category_id Int
  created_at  DateTime @default(now())
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(100)
  created_at DateTime  @default(now())
  BookTag    BookTag[]
}

model BookTag {
  id         Int      @id @default(autoincrement())
  book       Book     @relation(fields: [book_id], references: [id])
  book_id    Int
  tag        Tag      @relation(fields: [tag_id], references: [id])
  tag_id     Int
  created_at DateTime @default(now())
}

model Chapter {
  id             Int            @id @default(autoincrement())
  book           Book           @relation(fields: [book_id], references: [id])
  book_id        Int
  title          String         @db.VarChar(150)
  content_path   String         @db.VarChar(255)
  chapter_number Int
  visibility     BookVisibility @default(PRIVATE)
  is_vip         Boolean        @default(false)
  words_count    Int            @default(0)
  views_count    Int            @default(0)
  unlocked_count Int            @default(0)
  is_draft       Boolean        @default(true)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
}
